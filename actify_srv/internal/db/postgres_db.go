package db

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
)

type PostgresDB struct {
	DB  *sql.DB
	isConnected bool
}

const USER_TABLE_CREATE_QUERY = `
	CREATE TABLE IF NOT EXISTS users (
		id 				BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		username 		VARCHAR(20) NOT NULL,
		email 			TEXT UNIQUE NOT NULL,
		phone_number 	VARCHAR(20) UNIQUE,
    	phone_verified 	BOOLEAN DEFAULT FALSE,
		password 		TEXT NOT NULL,
		birthdate 		DATE,
		gender 			INTEGER DEFAULT 0,
		profile_url 	TEXT,
		is_active 		BOOLEAN DEFAULT TRUE,
		is_admin 		BOOLEAN DEFAULT TRUE,
		last_login 		TIMESTAMP,
		created_at 		TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		updated_at 		TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	);
	`

const USER_CONSENTS_CREATE_QUERY = `
	CREATE TABLE IF NOT EXISTS user_consents (
		consents_id 	BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
		user_id 		BIGINT NOT NULL,
		consent_type 	VARCHAR(50) NOT NULL,
		agreed 			BOOLEAN NOT NULL,
		agreed_at 		TIMESTAMP NOT NULL,
		ip_address 		VARCHAR(45),
		user_agent 		TEXT,
		FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
	);
	`

const API_KEY_TABLE_CREATE_QUERY = `
	CREATE TABLE IF NOT EXISTS api_keys (
		id 				BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    	user_id         BIGINT REFERENCES users(id),
    	api_key         TEXT NOT NULL UNIQUE,
    	name            VARCHAR(20) NOT NULL,
    	scopes          TEXT[],
    	created_at      TIMESTAMP DEFAULT NOW(),
    	expires_at      TIMESTAMP,
    	last_used_at    TIMESTAMP,
    	is_active       BOOLEAN DEFAULT TRUE  
	);
	`

const GROUP_TABLE_CREATE_QUERY = `
	CREATE TABLE IF NOT EXISTS groups (
		id 			BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
		name 		TEXT NOT NULL,
		mnger_id 	INTEGER REFERENCES users(id),
		greeting 	TEXT,
		description TEXT,
		category 	INTEGER DEFAULT 0,
		created_at 	TIMESTAMP DEFAULT NOW()
	);
	`

const GROUP_MEMBER_TABLE_CREATE_QUERY = `
	CREATE TABLE IF NOT EXISTS group_mems (
		group_id 	INTEGER REFERENCES groups(id) ON DELETE CASCADE,
		user_id 	INTEGER REFERENCES users(id) ON DELETE CASCADE,
		role 		INTEGER DEFAULT 100,
		joined_at 	TIMESTAMP DEFAULT NOW(),
		nick_name 	TEXT NOT NULL,
		PRIMARY KEY (group_id, user_id)
	);
	`

const GROUP_NOTICE_TABLE_CREATE_QUERY = `
	CREATE TABLE IF NOT EXISTS group_notices (
		id 				BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
		group_id        INTEGER NOT NULL REFERENCES groups(id) ON DELETE CASCADE,
		author_id       INTEGER REFERENCES users(id) ON DELETE SET NULL,
		title           TEXT NOT NULL,
		content         TEXT NOT NULL,
		is_important    BOOLEAN DEFAULT FALSE,
		is_public       BOOLEAN DEFAULT TRUE,
		view_count      INTEGER DEFAULT 0,
		posted_at       TIMESTAMP DEFAULT NOW(),
		expires_at      TIMESTAMP,
		updated_at      TIMESTAMP DEFAULT NOW()
	);
	`

func NewPostgresDb() *PostgresDB {
	return &PostgresDB{isConnected: false}
}


func (db *PostgresDB) InitializePostgres(connStr string) error {
	pDb, err := connectPostgres(connStr)
	if err != nil {
		return fmt.Errorf("database connection error(err: %v)", err)
	}

	db.DB = pDb

	err = db.checkTable()
	if err != nil {
		return fmt.Errorf("check database table error(err: %v)", err)
	}

	db.isConnected = true
	return nil
}


func connectPostgres(connStr string) (*sql.DB, error) {
	pDb, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}

	err = pDb.Ping()
	if err != nil {
		panic(err)
	}

	fmt.Println("Info: Postgress Database connection success")

	return pDb, nil
}


func (pDb *PostgresDB) Destroy() {
	defer pDb.DB.Close()
	pDb.isConnected = false
}


func (pDb *PostgresDB) checkTable() error {
	runQuery(pDb.DB, USER_TABLE_CREATE_QUERY)
	runQuery(pDb.DB, API_KEY_TABLE_CREATE_QUERY)
	runQuery(pDb.DB, USER_CONSENTS_CREATE_QUERY)
	runQuery(pDb.DB, GROUP_TABLE_CREATE_QUERY)
	runQuery(pDb.DB, GROUP_MEMBER_TABLE_CREATE_QUERY)
	runQuery(pDb.DB, GROUP_NOTICE_TABLE_CREATE_QUERY)
	return nil
}


func runQuery(pDb *sql.DB, query string) error {
	_, err := pDb.Exec(query)
	if err != nil {
		fmt.Printf("Err: query error.(query: %v)(err: %v)\n", query, err)
		return err
	}

	fmt.Printf("Info: query success.\n")
	return nil
}